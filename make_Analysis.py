'''
make_Analysis.py
by Joe Laforet Jr.
jrl78@duke.edu

Generates RDF and SASA analysis scripts for use within VMD for a given simulation trajectory.
MUST have .mol2 files of drug and excipient present in the directory that you are
conducting analysis in.

usage: make_Analysis.py [-h] -d DRUG -e EXCIP --traj TRAJECTORY [-r RUN]
	optional arguments:
	  -h, --help            show this help message and exit
	  -d DRUG, --drug DRUG
				Input name of Drug
      -e EXCIP, --excipient EXCIP
				Input name of Excipient
      --traj TRAJECTORY
                Input file name for trajectory to analyze
'''

import pandas as pd
import numpy as np

import argparse

import os
from os.path import exists
from distutils.spawn import find_executable

import math

import logging
import subprocess
import sys

from rdkit import Chem
from rdkit.Chem.rdMolDescriptors import CalcMolFormula
from collections import defaultdict

import mdtraj as md

import warnings
warnings.filterwarnings("ignore")


# Define the writeJob function
def writeJob(jobName, command):
    job_file = os.path.join(os.getcwd(), '%s.sh' % str(jobName))
    with open(job_file, 'w') as fh:
        fh.write("#!/bin/bash\n")
        fh.write('#SBATCH --mail-type=begin\n')
        fh.write('#SBATCH --mail-type=end\n')
        fh.write('#SBATCH --mail-user=jrl78@duke.edu\n')
        fh.write('#SBATCH -e slurm.err\n')
        fh.write("#SBATCH --job-name=%s.job\n" % jobName)
        fh.write("#SBATCH --mem=4G\n")
        fh.write("#SBATCH -p scavenger-gpu --gres=gpu:1\n")
        fh.write("#SBATCH --exclusive\n")
        fh.write('%s\n' % command)
    # Submit the job using sbatch
    subprocess.run(['sbatch', job_file])


# MAIN CODE	
parser = argparse.ArgumentParser(add_help=True)
parser.add_argument("-d", "--drug", type=str, required=True, help="Input name of Drug")
parser.add_argument("-e", "--excip", type=str, required=True, help="Input name of Excipient")
parser.add_argument("--traj", type=str, required = True, help='Input filename for trajectory to analyze. NOTE do not include .pdb i.e. traj')
args = parser.parse_args()

print('--------------------------------------------------------------------')
print("     Welcome to make_Analysis.py!      ")
print("     By Joe Laforet Jr.      ")
print("")
print("This script is used for generating .tcl scripts for analyzing RDF and SASA for jawBreaker simulations.")
print('--------------------------------------------------------------------')


#NOTE The way we calculate SASA is a normalized pecentage of what amount of drug is currently covered by excipient
# Measure SASA of only drug at frame 0, corresponds to how much SASA pure drug has
# Measure SASA of drug with excipient shielding at each frame
# Divide shielding SASA / Max Theoretical SASA
# Answers are given as percentages of maximum SASA %

names = [args.drug, args.excip]
mol2_files = [x+'.mol2' for x in names]
resNames = [md.load(filename).top.residue(0).name for filename in mol2_files]
traj_name = args.traj
traj_name = traj_name.split('.')[0]
print('--------------------------------------------------------------------')
# Check for one residue name per mol2 file and uniqueness between all mol2 files
all_names = set()

for filename in mol2_files:
    t = md.load(filename)
    inFile_names = set([r.name for r in t.top.residues])

    if len(inFile_names) != 1:
        raise(ValueError("Must have a SINGLE residue name in each mol2 file."))

    resNames.append(list(inFile_names)[0])
    all_names = all_names.union(list(inFile_names))

if len(all_names) != len(mol2_files):
    raise(ValueError("Must have UNIQUE residue names in each mol2 file."))


# Checks passed, now to fill the parametrization template

# Inside template, 0 == traj, 1 == Drug Resname, 2 == Excip Resname

VMD_RDF_ANALYSIS_TEMPLATE = """
# VMD for WIN32, version 1.9.3 (November 30, 2016)
# Script Generated to calculate the RDF for D:D, D:E, D:Water for 
# JawBreaker simulations
# Generated by Joe Laforet Jr.
# jrl78@duke.edu

# Load in the completed simulation trajectory
mol new {%(traj_name)s.pdb} type {pdb} first 0 last -1 step 1 waitfor all

# Declare selection variables

set drug [atomselect top "resname %(drug_r)s"]
set excip [atomselect top "resname %(excip_r)s"]
set water [atomselect top "water"]

# Open the Drug:Drug file
set out_dd [open RDF_DD_DATA_%(traj_name)s_Drug_Drug.dat w]

# Calculate g(r) for Drug:Drug
set gr [measure gofr $drug $drug delta 0.1 rmax 100]

set r [lindex $gr 0]
set gr2 [lindex $gr 1]
set igr [lindex $gr 2]

set i 0
foreach j $r k $gr2 l $igr {
   puts $out_dd "$j $k $l"
}

close $out_dd

# Open the Drug:Excip file
set out_de [open RDF_DE_DATA_%(traj_name)s_Drug_Excip.dat w]

# Calculate g(r) for Drug:Excip
set gr [measure gofr $drug $excip delta 0.1 rmax 100]

set r [lindex $gr 0]
set gr2 [lindex $gr 1]
set igr [lindex $gr 2]

set i 0
foreach j $r k $gr2 l $igr {
   puts $out_de "$j $k $l"
}

close $out_de

# Open the Drug:Water file
set out_dw [open RDF_DW_DATA_%(traj_name)s_Drug_Water.dat w]

# Calculate g(r) for Drug:Water
set gr [measure gofr $drug $water delta 0.1 rmax 100]

set r [lindex $gr 0]
set gr2 [lindex $gr 1]
set igr [lindex $gr 2]

set i 0
foreach j $r k $gr2 l $igr {
   puts $out_dw "$j $k $l"
}

close $out_dw

mol delete all
"""

VMD_SASA_ANALYSIS_TEMPLATE = """

# Load in the completed simulation trajectory
mol new {%(traj_name)s.pdb} type {pdb} first 0 last -1 step 1 waitfor all

# selection
set drug [atomselect top "resname %(drug_r)s"]
set both [atomselect top "resname %(drug_r)s or resname %(excip_r)s"]
set n [molinfo top get numframes]
set traj_Name "%(traj_name)s"
set output [open "SASA_DATA_%(traj_name)s.dat" w]


# set maxSASA [measure sasa 1.4 $drug -restrict $drug]

# sasa calculation loop
for {set i 0} {$i < $n} {incr i} {
	molinfo top set frame $i
	set curSasa [measure sasa 1.4 $both -restrict $drug]
	puts "\t \t progress: $i/$n"
        #set answer [expr $curSasa/$maxSASA]
	puts $output "$curSasa"
}
puts "\t \t progress: $n/$n"
puts "Done."	
puts "output file: SASA_DATA_%(traj_name)s.dat"
close $output

mol delete all
"""


RDF_script = VMD_RDF_ANALYSIS_TEMPLATE % dict(traj_name = traj_name, drug_r = resNames[0], excip_r = resNames[1],
 drug_name = names[0], excip_name = names[1])

SASA_script = VMD_SASA_ANALYSIS_TEMPLATE % dict(traj_name = traj_name, drug_r = resNames[0], excip_r = resNames[1])

file_handle = open('RDF_analysis_{}.tcl'.format(traj_name), 'w')
file_handle.writelines(RDF_script)
file_handle.close()

file_handle = open('SASA_analysis_{}.tcl'.format(traj_name), 'w')
file_handle.writelines(SASA_script)
file_handle.close()

writeJob(f"SASA_{traj_name}", f"vmd < SASA_analysis_{traj_name}.tcl")
writeJob(f"RDF_{traj_name}", f"vmd < RDF_analysis_{traj_name}.tcl")


print('Success!')
print('--------------------------------------------------------------------')
